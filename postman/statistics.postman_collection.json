{
	"info": {
		"_postman_id": "d0333f86-e9bc-421d-ad18-f29c76450243",
		"name": "Diploma",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25993655"
	},
	"item": [
		{
			"name": "Statistic on 9090 (stat-server)",
			"item": [
				{
					"name": "Добавить 1 uri для 121.0.0.1 1-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:25\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:25\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/hit",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 2 uri для 121.0.0.1 1-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events/5\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:25\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events/5\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:25\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/hit",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get /events (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list statistic response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be \"1\"').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('app');\r",
									"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('uri');\r",
									"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events\"').to.eql('/events');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('hits');\r",
									"    pm.expect(jsonData[0].hits, '\"hits\" must be \"1\"').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris=/events",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2020-05-05 00:00:00"
								},
								{
									"key": "end",
									"value": "2035-05-05 00:00:00"
								},
								{
									"key": "uris",
									"value": "/events"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all and unique=false (2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list statistic response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be \"2\"').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('app');\r",
									"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('uri');\r",
									"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events\"').to.eql('/events');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('hits');\r",
									"    pm.expect(jsonData[0].hits, '\"hits\" must be \"1\"').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('app');\r",
									"    pm.expect(jsonData[1].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('uri');\r",
									"    pm.expect(jsonData[1].uri, '\"uri\" must be \"/events/5\"').to.eql('/events/5');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('hits');\r",
									"    pm.expect(jsonData[1].hits, '\"hits\" must be \"1\"').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/stats?start=2020-05-05 00:00:00&end=2023-05-05 00:00:00&unique=false",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2020-05-05 00:00:00"
								},
								{
									"key": "end",
									"value": "2023-05-05 00:00:00"
								},
								{
									"key": "unique",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 1 uri для 121.0.0.1 2-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:26\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:26\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/hit",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 1 uri для 121.0.0.1 3-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:26\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:26\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/hit",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 1 uri для 121.0.0.1 4-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:26\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:26\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/hit",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get /events (4)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list statistic response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be \"1\"').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('app');\r",
									"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('uri');\r",
									"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events\"').to.eql('/events');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('hits');\r",
									"    pm.expect(jsonData[0].hits, '\"hits\" must be \"3\"').to.eql(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris=/events",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2020-05-05 00:00:00"
								},
								{
									"key": "end",
									"value": "2035-05-05 00:00:00"
								},
								{
									"key": "uris",
									"value": "/events"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get /events and unique=true (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list statistic response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be \"1\"').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('app');\r",
									"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('uri');\r",
									"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events\"').to.eql('/events');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('hits');\r",
									"    pm.expect(jsonData[0].hits, '\"hits\" must be \"1\"').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/stats?start=2020-05-05 00:00:00&end=2023-05-05 00:00:00&uris=/events&unique=true",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2020-05-05 00:00:00"
								},
								{
									"key": "end",
									"value": "2023-05-05 00:00:00"
								},
								{
									"key": "uris",
									"value": "/events"
								},
								{
									"key": "unique",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 2 uri для 121.0.0.1 2-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events/1\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:26\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events/1\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/hit",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 3 uri для 121.0.0.1 1-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events/2\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:26\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events/2\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/hit",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 3 uri для 121.0.0.1 2-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events/2\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:26\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events/2\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/hit",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get /events/1 (1) and /events/2 (2) unique=false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list statistic response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be \"2\"').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('app');\r",
									"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('uri');\r",
									"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events/2\"').to.eql('/events/2');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('hits');\r",
									"    pm.expect(jsonData[0].hits, '\"hits\" must be \"2\"').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('app');\r",
									"    pm.expect(jsonData[1].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('uri');\r",
									"    pm.expect(jsonData[1].uri, '\"uri\" must be \"/events/1\"').to.eql('/events/1');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('hits');\r",
									"    pm.expect(jsonData[1].hits, '\"hits\" must be \"1\"').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris=/events/1&uris=/events/2",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2020-05-05 00:00:00"
								},
								{
									"key": "end",
									"value": "2035-05-05 00:00:00"
								},
								{
									"key": "uris",
									"value": "/events/1"
								},
								{
									"key": "uris",
									"value": "/events/2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 2 uri для 121.0.0.1 3-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events/1\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:26\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events/1\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/hit",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 3 uri для 121.0.0.1 3-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events/2\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:26\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events/2\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/hit",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get /events/1 (2) and /events/2 (3) unique=false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list statistic response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be \"2\"').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('app');\r",
									"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('uri');\r",
									"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events/2\"').to.eql('/events/2');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('hits');\r",
									"    pm.expect(jsonData[0].hits, '\"hits\" must be \"3\"').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('app');\r",
									"    pm.expect(jsonData[1].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('uri');\r",
									"    pm.expect(jsonData[1].uri, '\"uri\" must be \"/events/1\"').to.eql('/events/1');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('hits');\r",
									"    pm.expect(jsonData[1].hits, '\"hits\" must be \"2\"').to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatServer}}/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris=/events/1&uris=/events/2",
							"host": [
								"{{uriForStatServer}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2020-05-05 00:00:00"
								},
								{
									"key": "end",
									"value": "2035-05-05 00:00:00"
								},
								{
									"key": "uris",
									"value": "/events/1"
								},
								{
									"key": "uris",
									"value": "/events/2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Statistic on 8080 (stat-client)",
			"item": [
				{
					"name": "Добавить 1 uri для 121.0.0.1 1-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:25\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:25\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatClient}}/hit",
							"host": [
								"{{uriForStatClient}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 2 uri для 121.0.0.1 1-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events/5\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:25\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events/5\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:25\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatClient}}/hit",
							"host": [
								"{{uriForStatClient}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get /events (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list statistic response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be \"1\"').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('app');\r",
									"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('uri');\r",
									"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events\"').to.eql('/events');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('hits');\r",
									"    pm.expect(jsonData[0].hits, '\"hits\" must be \"1\"').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatClient}}/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris=/events",
							"host": [
								"{{uriForStatClient}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2020-05-05 00:00:00"
								},
								{
									"key": "end",
									"value": "2035-05-05 00:00:00"
								},
								{
									"key": "uris",
									"value": "/events"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all and unique=false (2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list statistic response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be \"2\"').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('app');\r",
									"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('uri');\r",
									"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events\"').to.eql('/events');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('hits');\r",
									"    pm.expect(jsonData[0].hits, '\"hits\" must be \"1\"').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('app');\r",
									"    pm.expect(jsonData[1].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('uri');\r",
									"    pm.expect(jsonData[1].uri, '\"uri\" must be \"/events/5\"').to.eql('/events/5');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('hits');\r",
									"    pm.expect(jsonData[1].hits, '\"hits\" must be \"1\"').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatClient}}/stats?start=2020-05-05 00:00:00&end=2023-05-05 00:00:00&unique=false",
							"host": [
								"{{uriForStatClient}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2020-05-05 00:00:00"
								},
								{
									"key": "end",
									"value": "2023-05-05 00:00:00"
								},
								{
									"key": "unique",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 1 uri для 121.0.0.1 2-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:26\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:26\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatClient}}/hit",
							"host": [
								"{{uriForStatClient}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 1 uri для 121.0.0.1 3-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:26\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:26\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatClient}}/hit",
							"host": [
								"{{uriForStatClient}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get /events (3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list statistic response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be \"1\"').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('app');\r",
									"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('uri');\r",
									"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events\"').to.eql('/events');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('hits');\r",
									"    pm.expect(jsonData[0].hits, '\"hits\" must be \"3\"').to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatClient}}/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris=/events",
							"host": [
								"{{uriForStatClient}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2020-05-05 00:00:00"
								},
								{
									"key": "end",
									"value": "2035-05-05 00:00:00"
								},
								{
									"key": "uris",
									"value": "/events"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get /events and unique=true (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list statistic response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be \"1\"').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('app');\r",
									"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('uri');\r",
									"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events\"').to.eql('/events');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('hits');\r",
									"    pm.expect(jsonData[0].hits, '\"hits\" must be \"1\"').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatClient}}/stats?start=2020-05-05 00:00:00&end=2023-05-05 00:00:00&uris=/events&unique=true",
							"host": [
								"{{uriForStatClient}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2020-05-05 00:00:00"
								},
								{
									"key": "end",
									"value": "2023-05-05 00:00:00"
								},
								{
									"key": "uris",
									"value": "/events"
								},
								{
									"key": "unique",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 2 uri для 121.0.0.1 2-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events/1\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:26\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events/1\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatClient}}/hit",
							"host": [
								"{{uriForStatClient}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 3 uri для 121.0.0.1 1-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events/2\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:26\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events/2\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatClient}}/hit",
							"host": [
								"{{uriForStatClient}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 3 uri для 121.0.0.1 2-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events/2\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:26\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events/2\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatClient}}/hit",
							"host": [
								"{{uriForStatClient}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get /events/1 (1) and /events/2 (2) unique=false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list statistic response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be \"2\"').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('app');\r",
									"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('uri');\r",
									"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events/2\"').to.eql('/events/2');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('hits');\r",
									"    pm.expect(jsonData[0].hits, '\"hits\" must be \"2\"').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('app');\r",
									"    pm.expect(jsonData[1].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('uri');\r",
									"    pm.expect(jsonData[1].uri, '\"uri\" must be \"/events/1\"').to.eql('/events/1');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('hits');\r",
									"    pm.expect(jsonData[1].hits, '\"hits\" must be \"1\"').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatClient}}/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris=/events/1&uris=/events/2",
							"host": [
								"{{uriForStatClient}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2020-05-05 00:00:00"
								},
								{
									"key": "end",
									"value": "2035-05-05 00:00:00"
								},
								{
									"key": "uris",
									"value": "/events/1"
								},
								{
									"key": "uris",
									"value": "/events/2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 2 uri для 121.0.0.1 3-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events/1\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:26\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events/1\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatClient}}/hit",
							"host": [
								"{{uriForStatClient}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 3 uri для 121.0.0.1 3-й",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Has hit create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('app');\r",
									"    pm.expect(jsonData.start, '\"app\"  must be \"ewm-main-service\"' + pm.environment.get('app') + '\"').to.eql(pm.environment.get('app'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('uri');\r",
									"    pm.expect(jsonData.start, '\"uri\"  must be \"/events/2\"' + pm.environment.get('uri') + '\"').to.eql(pm.environment.get('uri'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'ip' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ip');\r",
									"    pm.expect(jsonData.start, '\"ip\"  must be \"121.0.0.1\"' + pm.environment.get('ip') + '\"').to.eql(pm.environment.get('ip'));\r",
									"});\r",
									"\r",
									"pm.test(\"Test hit 'timestamp' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.start, '\"timestamp\"  must be \"2023-05-04 09:05:26\"' + pm.environment.get('timestamp') + '\"').to.eql(pm.environment.get('timestamp'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"app\":\"ewm-main-service\",\r\n    \"uri\":\"/events/2\",\r\n    \"ip\":\"121.0.0.1\",\r\n    \"timestamp\":\"2023-05-04 09:05:26\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatClient}}/hit",
							"host": [
								"{{uriForStatClient}}"
							],
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get /events/1 (2) and /events/2 (3) unique=false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list statistic response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be \"2\"').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('app');\r",
									"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('uri');\r",
									"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events/2\"').to.eql('/events/2');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[0] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('hits');\r",
									"    pm.expect(jsonData[0].hits, '\"hits\" must be \"3\"').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'app' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('app');\r",
									"    pm.expect(jsonData[1].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'uri' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('uri');\r",
									"    pm.expect(jsonData[1].uri, '\"uri\" must be \"/events/1\"').to.eql('/events/1');\r",
									"});\r",
									"\r",
									"pm.test(\"Test statistic[1] 'hits' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('hits');\r",
									"    pm.expect(jsonData[1].hits, '\"hits\" must be \"2\"').to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uriForStatClient}}/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris=/events/1&uris=/events/2",
							"host": [
								"{{uriForStatClient}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2020-05-05 00:00:00"
								},
								{
									"key": "end",
									"value": "2035-05-05 00:00:00"
								},
								{
									"key": "uris",
									"value": "/events/1"
								},
								{
									"key": "uris",
									"value": "/events/2"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "uriForStatServer",
			"value": "http://localhost:9090"
		},
		{
			"key": "uriForStatClient",
			"value": "http://localhost:8080"
		}
	]
}